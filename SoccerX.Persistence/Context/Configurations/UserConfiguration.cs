// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using SoccerX.Domain.Entities;
using SoccerX.Persistence.Context;
using System;
using System.Collections.Generic;

namespace SoccerX.Persistence.Context.Configurations
{
    public partial class UserConfiguration : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> entity)
        {
            entity.HasKey(e => e.Id).HasName("users_pkey");

            entity.ToTable("users");

            entity.HasIndex(e => e.Email, "uq_users_email").IsUnique();

            entity.HasIndex(e => e.Phonenumber, "uq_users_phonenumber").IsUnique();

            entity.HasIndex(e => e.Username, "uq_users_username").IsUnique();

            entity.HasIndex(e => new { e.Username, e.Email, e.Phonenumber }, "uq_users_username_email_phonenumber").IsUnique();

            entity.Property(e => e.Id)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasColumnName("id");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasColumnName("address");
            entity.Property(e => e.Avatarurl).HasColumnName("avatarurl");
            entity.Property(e => e.Banenddate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("banenddate");
            entity.Property(e => e.Birthdate).HasColumnName("birthdate");
            entity.Property(e => e.Cityid).HasColumnName("cityid");
            entity.Property(e => e.Countryid).HasColumnName("countryid");
            entity.Property(e => e.Createdate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp without time zone")
                .HasColumnName("createdate");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Followercount)
                .HasDefaultValue(0)
                .HasColumnName("followercount");
            entity.Property(e => e.Isdeleted)
                .HasDefaultValue(false)
                .HasColumnName("isdeleted");
            entity.Property(e => e.Isemailconfirmed)
                .HasDefaultValue(false)
                .HasColumnName("isemailconfirmed");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Passwordhash)
                .IsRequired()
                .HasColumnName("passwordhash");
            entity.Property(e => e.Phonenumber)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("phonenumber");
            entity.Property(e => e.Postalcode)
                .HasMaxLength(20)
                .HasColumnName("postalcode");
            entity.Property(e => e.Referraluserid).HasColumnName("referraluserid");
            entity.Property(e => e.Surname)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("surname");
            entity.Property(e => e.Updatedate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("updatedate");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("username");

            entity.HasOne(d => d.City).WithMany(p => p.Users)
                .HasForeignKey(d => d.Cityid)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("users_cityid_fkey");

            entity.HasOne(d => d.Country).WithMany(p => p.Users)
                .HasForeignKey(d => d.Countryid)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("users_countryid_fkey");

            entity.HasOne(d => d.Referraluser).WithMany(p => p.InverseReferraluser)
                .HasForeignKey(d => d.Referraluserid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("users_referraluserid_fkey");

            entity.HasMany(d => d.Blockeds).WithMany(p => p.Blockers)
                .UsingEntity<Dictionary<string, object>>(
                    "Blockeduser",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("Blockedid")
                        .HasConstraintName("blockedusers_blockedid_fkey"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("Blockerid")
                        .HasConstraintName("blockedusers_blockerid_fkey"),
                    j =>
                    {
                        j.HasKey("Blockerid", "Blockedid").HasName("blockedusers_pkey");
                        j.ToTable("blockedusers");
                        j.IndexerProperty<Guid>("Blockerid").HasColumnName("blockerid");
                        j.IndexerProperty<Guid>("Blockedid").HasColumnName("blockedid");
                    });

            entity.HasMany(d => d.Blockers).WithMany(p => p.Blockeds)
                .UsingEntity<Dictionary<string, object>>(
                    "Blockeduser",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("Blockerid")
                        .HasConstraintName("blockedusers_blockerid_fkey"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("Blockedid")
                        .HasConstraintName("blockedusers_blockedid_fkey"),
                    j =>
                    {
                        j.HasKey("Blockerid", "Blockedid").HasName("blockedusers_pkey");
                        j.ToTable("blockedusers");
                        j.IndexerProperty<Guid>("Blockerid").HasColumnName("blockerid");
                        j.IndexerProperty<Guid>("Blockedid").HasColumnName("blockedid");
                    });

            entity.HasMany(d => d.Followers).WithMany(p => p.Followings)
                .UsingEntity<Dictionary<string, object>>(
                    "Follower",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("Followerid")
                        .HasConstraintName("followers_followerid_fkey"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("Followingid")
                        .HasConstraintName("followers_followingid_fkey"),
                    j =>
                    {
                        j.HasKey("Followerid", "Followingid").HasName("followers_pkey");
                        j.ToTable("followers");
                        j.IndexerProperty<Guid>("Followerid").HasColumnName("followerid");
                        j.IndexerProperty<Guid>("Followingid").HasColumnName("followingid");
                    });

            entity.HasMany(d => d.Followings).WithMany(p => p.Followers)
                .UsingEntity<Dictionary<string, object>>(
                    "Follower",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("Followingid")
                        .HasConstraintName("followers_followingid_fkey"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("Followerid")
                        .HasConstraintName("followers_followerid_fkey"),
                    j =>
                    {
                        j.HasKey("Followerid", "Followingid").HasName("followers_pkey");
                        j.ToTable("followers");
                        j.IndexerProperty<Guid>("Followerid").HasColumnName("followerid");
                        j.IndexerProperty<Guid>("Followingid").HasColumnName("followingid");
                    });

            OnConfigurePartial(entity);
        }

        partial void OnConfigurePartial(EntityTypeBuilder<User> entity);
    }
}
